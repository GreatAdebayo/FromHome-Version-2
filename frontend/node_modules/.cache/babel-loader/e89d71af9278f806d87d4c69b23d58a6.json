{"ast":null,"code":"// import React, {useState} from 'react'\n// import Footer from '../../landing_page/footer'\n// import Navbar from '../../landing_page/navbar'\n// import { useHistory, useLocation } from 'react-router'\n// import { Formik, Form, Field, ErrorMessage } from 'formik';\n// import axios from 'axios';\n// import { Baseurl } from '../../baseurl';\n// import { ToastContainer, toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n// const CreateTutorPortal = () => {\n//     const [showloader, setShowloader] = useState(false)\n//     const path = useLocation();\n//     const history = useHistory();\n//     return (\n//         <>\n//             <section className=\"about container-fluid mt-3\" id=\"about\">\n//                 <small><ToastContainer /></small>\n//                 <div className=\"row\">\n//                     <div className=\"col-md-9 col-sm mx-auto\" data-aos=\"fade-in\" data-aos-delay=\"100\">\n//                         <div class=\"login-card\" style={{ borderRadius: '10px' }}>\n//                             <img src=\"assets/img/logo.png\" alt=\"\" /> <br />\n//                             <small><strong>üë®‚Äçüè´ Create a Tutor's Portal</strong></small>\n//                             <Formik\n//                                 initialValues={{ experience: '', category: '', purpose: '', token: '' }}\n//                                 validate={values => {\n//                                     const errors = {};\n//                                     if (!values.experience) {\n//                                         errors.experience = '*Years of experience Required';\n//                                     }\n//                                     else if (!values.category) {\n//                                         errors.category = '*Category Required';\n//                                     }\n//                                     else if (!values.purpose) {\n//                                         errors.purpose = '*Purpose Required';\n//                                     }\n//                                     return errors;\n//                                 }}\n//                                 onSubmit={(values, { setSubmitting }) => {\n//                                     setTimeout(() => {\n//                                         setShowloader(true)\n//                                         if (sessionStorage.Token) {\n//                                             let token = sessionStorage.Token\n//                                             values.token = token\n//                                             axios.post(`${Baseurl}beatutor`, values).then((res) => {\n//                                                 if(res.data === 'alreadyActivated'){\n//                                                     setShowloader(false)\n//                                                 toast(\"üòî Tutor portal already created!\", {\n//                                                     autoClose: 2000,\n//                                                 })\n//                                                 setTimeout(() => history.push('/tutor-portal'), 2000)\n//                                                 }else if(res.data === 'tutorActivated'){\n//                                                     setShowloader(false)\n//                                                     toast(\"üëç Tutor portal created!\", {\n//                                                         autoClose: 2000,\n//                                                     })\n//                                                 setTimeout(() => history.push('/tutor-portal'), 2000)\n//                                                 }\n//                                             }).catch((error)=>{\n//                                               if(error.response.status){\n//                                                   setShowloader(false)\n//                                                 toast(\"üòî You need to be logged in!\", {\n//                                                     autoClose: 2000,\n//                                                 })\n//                                                 setTimeout(() => history.push('/login'), 2000)\n//                                                 sessionStorage.setItem('Path', path.pathname)\n//                                               }\n//                                             })\n//                                         } else {\n//                                             setShowloader(false)\n//                                             toast(\"üòî You need to be logged in!\", {\n//                                                 autoClose: 2000,\n//                                             })\n//                                             setTimeout(() => history.push('/login'), 2000)\n//                                             sessionStorage.setItem('Path', path.pathname)\n//                                         }\n//                                         setSubmitting(false);\n//                                     }, 400);\n//                                 }}\n//                             >\n//                                 {({ isSubmitting }) => (\n//                                     <Form>\n//                                         <div class=\"row-1\">\n//                                             <div class=\"row row-2\"> <span id=\"login-card-inner\">Experience</span> </div>\n//                                             <div class=\"row row-2\"> <Field type=\"number\" placeholder=\"How long have you been a Tutor?\" name=\"experience\" />\n//                                                 <ErrorMessage name=\"experience\" component=\"small\" className='text-danger' />\n//                                             </div>\n//                                         </div>\n//                                         <div class=\"row-1\">\n//                                             <div class=\"row row-2\"> <span id=\"login-card-inner\">Category of Interest</span> </div>\n//                                             <div class=\"row row-2\">\n//                                                 <Field as=\"select\" name=\"category\" class=\"form-select form-select-sm mt-1\" aria-label=\".form-select-sm example\">\n//                                                     <option selected>Choose a category</option>\n//                                                     <option value=\"Design\">Design</option>\n//                                                     <option value=\"Marketing\">Marketing</option>\n//                                                     <option value=\"IT and Software\">IT and Software</option>\n//                                                     <option value=\"Photograpy\">Photograpy</option>\n//                                                     <option value=\"Engineering\">Engineering</option>\n//                                                     <option value=\"Engineering\">Engineering</option>\n//                                                     <option value=\"Agriculture\">Agriculture</option>\n//                                                     <option value=\"Business\">Business</option>\n//                                                 </Field>\n//                                                 <ErrorMessage name=\"category\" component=\"small\" className='text-danger' />\n//                                             </div>\n//                                         </div>\n//                                         <div class=\"row-1\">\n//                                             <div class=\"row row-2\"> <span id=\"login-card-inner\">Purpose</span> </div>\n//                                             <div class=\"row row-2\">\n//                                                 <Field as=\"select\" name=\"purpose\" class=\"form-select form-select-sm mt-1\" aria-label=\".form-select-sm example\">\n//                                                     <option selected>Choose a purpose</option>\n//                                                     <option value=\"For-Profit\">For-Profit</option>\n//                                                     <option value=\"Not-for-Profit\">Not-for-Profit</option>\n//                                                 </Field>\n//                                                 <ErrorMessage name=\"purpose\" component=\"small\" className='text-danger' />\n//                                             </div>\n//                                         </div>\n//                                         <button class=\"btn d-flex mx-auto\" type=\"submit\" disabled={isSubmitting}><b>{showloader ? <i class=\"fas fa-spinner fa-spin\"></i> : ''} Create</b></button>\n//                                     </Form>\n//                                 )}\n//                             </Formik>\n//                         </div>\n//                     </div>\n//                 </div>\n//             </section>\n//         </>\n//     )\n// }\n// export default CreateTutorPortal","map":{"version":3,"sources":["C:/xampp/htdocs/FROMHOME/frontend/src/components/dashboard/tutors_portal/create_tutor_portal.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA","sourcesContent":["// import React, {useState} from 'react'\r\n// import Footer from '../../landing_page/footer'\r\n// import Navbar from '../../landing_page/navbar'\r\n// import { useHistory, useLocation } from 'react-router'\r\n// import { Formik, Form, Field, ErrorMessage } from 'formik';\r\n// import axios from 'axios';\r\n// import { Baseurl } from '../../baseurl';\r\n// import { ToastContainer, toast } from 'react-toastify';\r\n// import 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\n// const CreateTutorPortal = () => {\r\n//     const [showloader, setShowloader] = useState(false)\r\n//     const path = useLocation();\r\n//     const history = useHistory();\r\n//     return (\r\n//         <>\r\n           \r\n//             <section className=\"about container-fluid mt-3\" id=\"about\">\r\n//                 <small><ToastContainer /></small>\r\n//                 <div className=\"row\">\r\n//                     <div className=\"col-md-9 col-sm mx-auto\" data-aos=\"fade-in\" data-aos-delay=\"100\">\r\n//                         <div class=\"login-card\" style={{ borderRadius: '10px' }}>\r\n//                             <img src=\"assets/img/logo.png\" alt=\"\" /> <br />\r\n\r\n//                             <small><strong>üë®‚Äçüè´ Create a Tutor's Portal</strong></small>\r\n\r\n//                             <Formik\r\n//                                 initialValues={{ experience: '', category: '', purpose: '', token: '' }}\r\n//                                 validate={values => {\r\n//                                     const errors = {};\r\n//                                     if (!values.experience) {\r\n//                                         errors.experience = '*Years of experience Required';\r\n//                                     }\r\n//                                     else if (!values.category) {\r\n//                                         errors.category = '*Category Required';\r\n//                                     }\r\n//                                     else if (!values.purpose) {\r\n//                                         errors.purpose = '*Purpose Required';\r\n//                                     }\r\n\r\n\r\n\r\n//                                     return errors;\r\n//                                 }}\r\n//                                 onSubmit={(values, { setSubmitting }) => {\r\n//                                     setTimeout(() => {\r\n//                                         setShowloader(true)\r\n//                                         if (sessionStorage.Token) {\r\n//                                             let token = sessionStorage.Token\r\n//                                             values.token = token\r\n//                                             axios.post(`${Baseurl}beatutor`, values).then((res) => {\r\n//                                                 if(res.data === 'alreadyActivated'){\r\n//                                                     setShowloader(false)\r\n//                                                 toast(\"üòî Tutor portal already created!\", {\r\n//                                                     autoClose: 2000,\r\n//                                                 })\r\n//                                                 setTimeout(() => history.push('/tutor-portal'), 2000)\r\n//                                                 }else if(res.data === 'tutorActivated'){\r\n//                                                     setShowloader(false)\r\n//                                                     toast(\"üëç Tutor portal created!\", {\r\n//                                                         autoClose: 2000,\r\n//                                                     })\r\n//                                                 setTimeout(() => history.push('/tutor-portal'), 2000)\r\n//                                                 }\r\n//                                             }).catch((error)=>{\r\n//                                               if(error.response.status){\r\n//                                                   setShowloader(false)\r\n//                                                 toast(\"üòî You need to be logged in!\", {\r\n//                                                     autoClose: 2000,\r\n//                                                 })\r\n//                                                 setTimeout(() => history.push('/login'), 2000)\r\n//                                                 sessionStorage.setItem('Path', path.pathname)\r\n                                            \r\n//                                               }\r\n//                                             })\r\n//                                         } else {\r\n//                                             setShowloader(false)\r\n//                                             toast(\"üòî You need to be logged in!\", {\r\n//                                                 autoClose: 2000,\r\n//                                             })\r\n//                                             setTimeout(() => history.push('/login'), 2000)\r\n//                                             sessionStorage.setItem('Path', path.pathname)\r\n//                                         }\r\n//                                         setSubmitting(false);\r\n//                                     }, 400);\r\n//                                 }}\r\n//                             >\r\n//                                 {({ isSubmitting }) => (\r\n\r\n//                                     <Form>\r\n\r\n//                                         <div class=\"row-1\">\r\n//                                             <div class=\"row row-2\"> <span id=\"login-card-inner\">Experience</span> </div>\r\n//                                             <div class=\"row row-2\"> <Field type=\"number\" placeholder=\"How long have you been a Tutor?\" name=\"experience\" />\r\n//                                                 <ErrorMessage name=\"experience\" component=\"small\" className='text-danger' />\r\n//                                             </div>\r\n//                                         </div>\r\n\r\n//                                         <div class=\"row-1\">\r\n//                                             <div class=\"row row-2\"> <span id=\"login-card-inner\">Category of Interest</span> </div>\r\n//                                             <div class=\"row row-2\">\r\n//                                                 <Field as=\"select\" name=\"category\" class=\"form-select form-select-sm mt-1\" aria-label=\".form-select-sm example\">\r\n//                                                     <option selected>Choose a category</option>\r\n//                                                     <option value=\"Design\">Design</option>\r\n//                                                     <option value=\"Marketing\">Marketing</option>\r\n//                                                     <option value=\"IT and Software\">IT and Software</option>\r\n//                                                     <option value=\"Photograpy\">Photograpy</option>\r\n//                                                     <option value=\"Engineering\">Engineering</option>\r\n//                                                     <option value=\"Engineering\">Engineering</option>\r\n//                                                     <option value=\"Agriculture\">Agriculture</option>\r\n//                                                     <option value=\"Business\">Business</option>\r\n//                                                 </Field>\r\n//                                                 <ErrorMessage name=\"category\" component=\"small\" className='text-danger' />\r\n//                                             </div>\r\n//                                         </div>\r\n\r\n//                                         <div class=\"row-1\">\r\n//                                             <div class=\"row row-2\"> <span id=\"login-card-inner\">Purpose</span> </div>\r\n//                                             <div class=\"row row-2\">\r\n//                                                 <Field as=\"select\" name=\"purpose\" class=\"form-select form-select-sm mt-1\" aria-label=\".form-select-sm example\">\r\n//                                                     <option selected>Choose a purpose</option>\r\n//                                                     <option value=\"For-Profit\">For-Profit</option>\r\n//                                                     <option value=\"Not-for-Profit\">Not-for-Profit</option>\r\n//                                                 </Field>\r\n//                                                 <ErrorMessage name=\"purpose\" component=\"small\" className='text-danger' />\r\n//                                             </div>\r\n//                                         </div>\r\n\r\n//                                         <button class=\"btn d-flex mx-auto\" type=\"submit\" disabled={isSubmitting}><b>{showloader ? <i class=\"fas fa-spinner fa-spin\"></i> : ''} Create</b></button>\r\n//                                     </Form>\r\n//                                 )}\r\n//                             </Formik>\r\n\r\n//                         </div>\r\n//                     </div>\r\n\r\n//                 </div>\r\n//             </section>\r\n       \r\n//         </>\r\n//     )\r\n// }\r\n\r\n// export default CreateTutorPortal\r\n"]},"metadata":{},"sourceType":"module"}